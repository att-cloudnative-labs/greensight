# install java
apt-get update
apt install openjdk-8-jdk
#add-apt-repository ppa:webupd8team/java
#apt-get update
#apt-get install oracle-java8-installer



# set environment variables
echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.bashrc
echo 'export PATH="$PATH:${JAVA_HOME}/bin"' >> ~/.bashrc
source ~/.bashrc
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH="$PATH:${JAVA_HOME}/bin"


# mongodb installation
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.2.list
apt-get update
apt-get install -y mongodb-org
systemctl start mongod
systemctl status mongod
systemctl enable mongod


# nginx installation and configuration
apt-get update
apt-get install nginx
ufw app list
# edit nginx conf
vim /etc/nginx/sites-available/default
# replace old content with the one below
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        gzip on;
        gzip_types      text/plain application/xml application/javascript application/x-javascript text/javascript;
        gzip_proxied    no-cache no-store private expired auth;
        gzip_min_length 1000;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name localhost;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.html =404;
        }
        location /api/model {
                proxy_pass http://localhost:8080/;
        }
        location /api/forecast {
                proxy_pass http://localhost:8443/;
        }
        location /api/simulation {
                proxy_pass http://localhost:9999/v1;
        }

        root /var/www/html;

}
# save and exit :wq
# restart nginx
service nginx restart


# install nodejs and npm
curl -sL https://deb.nodesource.com/setup_10.x | bash -
apt-get install -y nodejs unzip
node -v
npm -v


# install angular cli
npm install -g @angular/cli


# setup connection to documentdb 
# copy rds-combined-ca-bundle.pem to /home/ubuntu by scp
# import certs for documentdb
# ensure rds-combined-ca-bundle.pem cert file exists under /home/ubuntu/
cd $JAVA_HOME/jre/lib/security/
keytool -importcert -alias documentdb -keystore cacerts -trustcacerts -file /home/ubuntu/rds-combined-ca-bundle.pem
# password: changeit
# type yes to finish importing


# download Backend jar files
cd /opt
mkdir greensight-be
cd greensight-be
wget http://egnexus.dtvops.net:8081/nexus/content/repositories/releases/cptl/capacityplanning/backend/1.0.35/backend-1.0.35.jar
wget http://egnexus.dtvops.net:8081/nexus/content/repositories/releases/cptl/capacityplanning/modelbackend/1.0.37/modelbackend-1.0.37.jar
# create bash scripts for running services 
vim /opt/greensight-be/cpt-fc
#edit file conttent, make sure app will connect to documentdb
	#!/bin/sh
	/usr/lib/jvm/java-8-openjdk-amd64/bin/java -Dspring.data.mongodb.uri='mongodb://sbcptuser:DTV123456!@sb-cpt.cluster-cudb5kwtnqdt.us-west-2.docdb.amazonaws.com:27017/sb-cpt?ssl=true&replicaSet=rs0' -Dspring.data.mongodb.database='sb-cpt' -jar /opt/greensight-be/fc-be
# save and exit :wq

vim /opt/greensight-be/cpt-model
#edit file conttent, make sure app will connect to documentdb
	#!/bin/sh
	/usr/lib/jvm/java-8-openjdk-amd64/bin/java -Dspring.data.mongodb.uri='mongodb://sbcptuser:DTV123456!@sb-cpt.cluster-cudb5kwtnqdt.us-west-2.docdb.amazonaws.com:27017/sb-cpt?ssl=true&replicaSet=rs0' -Dspring.data.mongodb.database='sb-cpt' -jar /opt/greensight-be/model-be
# save and exit :wq
# chmod execute
chmod +x cpt-fc
chmod +x cpt-model

# create symlink
ln -fs /opt/greensight-be/backend-1.0.35.jar /opt/greensight-be/fc-be
ln -fs /opt/greensight-be/modelbackend-1.0.37.jar /opt/greensight-be/model-be

# pull Simulation node service from ATT registry
cd /opt/greensight-be
mkdir simulation
# create .npmrc
vim .npmrc
# edit file content like below:
@cpt:registry=http://npmcache.aeg.cloud/
# save and exit :wq
# pull node service
npm i @cpt/capacity-planning-simulation-service@0.0.680

# setup running be jars and simulation node run as systemctl service 
# cpt-fc service
vim /etc/systemd/system/cpt-fc.service
# edit file content
[unit]
Description=Capacity Planning Tool Forecast BE
[Service]
User=ubuntu
ExecStart=/opt/greensight-be/cpt-fc
SuccessExitStatus=143
TimeoutStopSec=10
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
# save and exit :wq

# create cpt-model service
vim /etc/systemd/system/cpt-model.service
# edit file content[Unit]
Description=Capacity Planning Tool Model BE
[Service]
User=ubuntu
ExecStart=/opt/greensight-be/cpt-model
SuccessExitStatus=143
TimeoutStopSec=10
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
# save and exit :wq

# create cpt-simulation service
vim /etc/systemd/system/cpt-simulation.service
# edit file content
[unit]
Description=Capacity Planning Tool Simulation BE
After=network.target
[Service]
User=ubuntu
WorkingDirectory=/opt/greensight-be/simulation
ExecStart=/usr/bin/node --experimental-worker /opt/greensight-be/simulation/node_modules/@cpt/capacity-planning-simulation-service/www.js
TimeoutStopSec=10
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
# save and exit :wq

# start services
systemctl daemon-reload
systemctl enable cpt-fc.service
systemctl enable cpt-model.service
systemctl enable cpt-simulation.service
systemctl start cpt-fc
systemctl start cpt-model
systemctl start cpt-simulation
systemctl status cpt-fc
systemctl status cpt-model
systemctl status cpt-simulation


# setup FE
# clone BBK FE repo
cd /opt
git clone ssh://git@egbitbucket.dtvops.net:7999/cptl/capacity-planning-frontend.git
# local npm install
cd /opt/capacity-planning-frontend/src/capacity-planning-tool
npm install
# build angular app
ng build --prod --configuration=staging
# ng build --prod --configuration=QA
# ng build --prod --configuration=production
# after build complete, copy it to /var/www/html
cp -r /opt/capacity-planning-frontend/src/capacity-planning-tool/dist/* /var/www/html/


# OPTIONAL if we want to run a brand new local mongo db instead of connecting to documentdb, pls do following
# install python pip
apt install python-pip
# install pymongo
pip install pymongo
# pull Forecast BE repo from BBK
cd /opt/greensight-be
git clone ssh://git@egbitbucket.dtvops.net:7999/cptl/capacity-planning-backend.git
cd /opt/greensight-be/capacity-planning-backend/scripts
# run initial scripts for creating root data
python 01-create-admin-user.py
python 02-create-root-tree-node.py
python 03-create-forecast-root-node.py
# stop BE services 
service cpt-fc stop
service cpt-model stop
# edit BE startup script files
vim /opt/greensight-be/cpt-fc
#edit file content
	#!/bin/sh
	/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar /opt/greensight-be/fc-be
# save and exit :wq
vim /opt/greensight-be/cpt-model
#edit file content
	#!/bin/sh
	/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar /opt/greensight-be/model-be
# save and exit :wq
# start BE services
service cpt-fc start
service cpt-model start